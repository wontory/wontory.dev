---
import type { GetStaticPaths } from "astro";
import { getCollection, type CollectionEntry } from "astro:content";
import Giscus from "~/components/giscus.astro";
import PostNavigation from "~/components/post-navigation.astro";
import Button from "~/components/ui/button.astro";
import Link from "~/components/ui/link.astro";
import Layout from "~/layouts/layout.astro";
import { formatDate } from "~/utils/date";
import { process } from "~/utils/process";
import { readingTime } from "~/utils/reading-time";

export const getStaticPaths = (async () => {
  const posts = process<"blog">(await getCollection("blog"));

  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}) satisfies GetStaticPaths;

type Props = CollectionEntry<"blog">;

const post = Astro.props;

const { Content } = await post.render();
const posts = process<"blog">(await getCollection("blog"));
const id = posts.findIndex((post) => post.slug === Astro.params.slug);
---

<Layout
  title={`${post.data.title} | wontory`}
  description={post.data.description}
>
  <div class="animate">
    <a href="/blog">
      <Button>뒤로가기</Button>
    </a>
  </div>
  <div class="animate my-10 space-y-1">
    <div class="font-base flex items-center gap-1 text-sm">
      <time datetime={post.data.date.toISOString()}>
        {formatDate(post.data.date)}
      </time>
      ﹒
      <span>{readingTime(post.body)}</span>
    </div>
    <h1 class="text-3xl font-semibold text-foreground">
      {post.data.title}
    </h1>
  </div>
  <div class="animate flex flex-col gap-24">
    <article class="prose">
      <Content components={{ a: Link }} />
    </article>
    <div><PostNavigation current={id} collection={posts} /></div>
    <div><Giscus /></div>
  </div>
</Layout>
